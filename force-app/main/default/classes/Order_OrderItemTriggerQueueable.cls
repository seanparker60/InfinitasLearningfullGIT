public with sharing class Order_OrderItemTriggerQueueable implements Queueable {
    
    
    Private List<Order> CurOrder;
    Private List<Order> MaxOrder;
    Private String load;

    
    
    
    public Order_OrderItemTriggerQueueable(List<Order> CurOrder, String load, List<Order> MaxOrder) {
      //  this.OrderItems = OrderItems;

      this.load = load;
      system.debug('**OrderItem Trigger: load**'+load);
      if(load == 'Start'){
          this.CurOrder = CurOrder;
          // this.MaxOrder = MaxOrder;
          this.MaxOrder = new List<Order>();
          
           for(Order ord:CurOrder){
              this.MaxOrder.add(ord);
           }
            system.debug('**OrderItem Trigger: Queueable Constructor**'+CurOrder);
            system.debug('**OrderItem Trigger: Queueable Constructor: MaxOrder**'+MaxOrder);
         
      }
      else {
        
        CurOrder.remove(0);
        this.CurOrder= CurOrder;
        this.MaxOrder = MaxOrder;
        system.debug('**OrderItem Trigger: load else2**'+CurOrder.size());
        system.debug('**OrderItem Trigger: load else:MaxOrder**'+MaxOrder);
      }   


    }

    public void execute(System.QueueableContext qc) {
     // system.debug('**OrderItem Trigger: Queueable Constructor: Load**'+MaxOrder[0].id);

      
      if(CurOrder.size()>0){      
            
        system.debug('**OrderItem Trigger: Queueable Constructor: Size>0**'+CurOrder[0].ShippingIndicationRule__c);
          //  UTIL_TriggerController.OrderItemTriggerSwitch = false;
            
            OrderItem[] lstOrderItem = [Select Product2.VAT__c,DigitalActivationEMail__c,ShipToAccount__r.DigitalActivationEmail__c, 
            ShippingCity__c,ShipToAccount__r.ShippingCity,ShippingCountry__c,ShipToAccount__r.ShippingCountry,ShippingPostalCode__c,ShipToAccount__r.ShippingPostalCode,
            ShippingState__c,ShipToAccount__r.ShippingState,ShippingStreet__c,ShipToAccount__r.ShippingStreet,ShippingIndicationRule__c,Weight__c,Order.ShippingIndicationRule__c
            from OrderItem where OrderId =:CurOrder[0].id];

           try{

            system.debug('**OrderItem Trigger: Queueable Constructor: Dates Load **'+lstOrderItem);
            lstOrderItem =  Order_UpdateVatOnItems.UpdateVatOnItems(lstOrderItem);
           }
          catch(exception e){
            system.debug('**OrderItem Trigger: Queueable Constructor: Dates Error **'+e.getmessage());
          }
 
          Order_UpdateShippingCostsFromItems.UpdateShippingCostsFromItems(lstOrderItem,CurOrder[0]);
         
          system.debug('**OrderItem Trigger: Queueable Constructor: Load:Size **'+CurOrder.size());
          system.debug('**OrderItem Trigger: Queueable Constructor: Load: CurOrder **'+CurOrder);
         
              

         if(!test.isrunningtest()){
                System.enqueueJob(new Order_OrderItemTriggerQueueable(CurOrder,'Next',MaxOrder));
         }
              
              
               
      }
      else{

       
        List<Id> Set_OrdId = new List<Id>();

        for(Order ord: MaxOrder){
          Set_OrdId.add(ord.id);
        }     
        Order[] lst_Order = Order_OrderandOrdeItemHandler.returnQueryOrder(Set_OrdId, null);

        //Check if Date block needs to be reset    
		    //Possibly add its own if and then make Maxcount the last else


//        Order_OrderUtilityQueueable.UpdateOrderDates(lst_Order);




        OrderLineItemMaxCount__mdt[] OrderLineItemMaxCount;
       
        if(test.isrunningtest()){
                OrderLineItemMaxCount = [Select Count__c from OrderLineItemMaxCount__mdt where MasterLabel='TestCount'];
        }
        else{
                OrderLineItemMaxCount = [Select Count__c from OrderLineItemMaxCount__mdt where MasterLabel='LiveCount'];
        }

        Decimal FIXEDLINECOUNT;
        FIXEDLINECOUNT =  OrderLineItemMaxCount[0].Count__c;

        Boolean checkListLineCount = false;    
        for(Order ord:lst_Order){
          if(ord.LineCount__c>FIXEDLINECOUNT && ord.ValidateB2BLineCountError__c == 0){
            List<Order> lstMaxOrder = new List<Order>();
            lstMaxOrder.add(ord);
            if(!test.isrunningtest()){
              System.enqueueJob(new Order_OrderLineCountManager(lstMaxOrder,'Start'));
            }       
         }  
        }    
        


    }    
    }    

}